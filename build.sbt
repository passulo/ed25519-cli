import scala.language.postfixOps

lazy val root = (project in file("."))
  .settings(
    name                 := "ed25519-cli",
    normalizedName       := "ed25519-cli",
    organization         := "com.passulo",
    organizationName     := "Passulo",
    organizationHomepage := Some(url("https://www.passulo.com")),
    description          := "Command Line Interface for using ed25519 EdEC Crypto",
    scmInfo              := Some(ScmInfo(url("https://github.com/passulo/ed25519-cli"), "git@github.com:passulo/ed25519-cli.git")),
    developers           := List(Developer("jannikarndt", "Jannik Arndt", "jannik@jannikarndt", url("https://github.com/JannikArndt"))),
    version              := "1.0.0",
    scalaVersion         := "2.13.8",
    Compile / mainClass  := Some("com.passulo.Ed25519cli"),
    scalacOptions        := scalaCompilerOptions,
    libraryDependencies ++= dependencies
  )
  .enablePlugins(NativeImagePlugin)
  .settings(
    picocliCodegen := (Compile / runMain)
      .fullInput(s" picocli.codegen.aot.graalvm.ReflectionConfigGenerator -o=target/native-image-configs/cli-reflection.json com.passulo.Ed25519cli")
      .evaluated,
    picocliAutoComplete := (Compile / runMain).fullInput(s" picocli.AutoComplete -f -o target/ed25519_completion.sh -n ed25519 com.passulo.TopCommand").evaluated,
    nativeImageJvm      := "graalvm-java17",
    nativeImageOutput   := file("target") / "ed25519",
    nativeImageVersion  := "22.0.0.2",
    nativeImageOptions := Seq(
      "-H:+ReportExceptionStackTraces",                                                                    // if native-image can't be created, tell us why
      "--no-fallback",                                                                                     // do not automatically create a JVM-based image, just fail
      s"-H:ReflectionConfigurationFiles=${target.value / "native-image-configs" / "cli-reflection.json"}", // picocli-stuff, created with picocliCodegen
      s"-H:ConfigurationFileDirectories=${target.value / "native-image-configs"}"                          // generated by nativeImageRunAgent
    )
  )

lazy val picocliCodegen      = inputKey[Unit]("Generate the reflection.json that helps GraalVM understand how reflection is used in Picocli.")
lazy val picocliAutoComplete = inputKey[Unit]("Generate the tab-completion file.")

addCommandAlias("build", "clean; compile; picocliCodegen; nativeImage")
addCommandAlias("buildIncremental", "compile; picocliAutoComplete; picocliCodegen; nativeImageRunAgent; nativeImage")

lazy val dependencies = Seq(
  "info.picocli" % "picocli"         % "4.6.3",
  "info.picocli" % "picocli-codegen" % "4.6.2"
)

lazy val scalaCompilerOptions = Seq(
  "-target:17",
  "-deprecation", // Emit warning and location for usages of deprecated APIs.
  "-encoding",
  "utf-8",         // Specify character encoding used by source files.
  "-explaintypes", // Explain type errors in more detail.
  "-feature",      // Emit warning and location for usages of features that should be imported explicitly.
  "-unchecked",    // Enable additional warnings where generated code depends on assumptions.
  "-Xcheckinit",   // Wrap field accessors to throw an exception on uninitialized access.
//  "-Xfatal-warnings",              // Fail the compilation if there are any warnings.
  "-Xlint:adapted-args",       // Warn if an argument list is modified to match the receiver.
  "-Xlint:constant",           // Evaluation of a constant arithmetic expression results in an error.
  "-Xlint:delayedinit-select", // Selecting member of DelayedInit.
  "-Xlint:doc-detached",       // A Scaladoc comment appears to be detached from its element.
  "-Xlint:inaccessible",       // Warn about inaccessible types in method signatures.
  "-Xlint:infer-any",          // Warn when a type argument is inferred to be `Any`.
//  "-Xlint:missing-interpolator",   // A string literal appears to be missing an interpolator id.
  "-Xlint:nullary-unit",           // Warn when nullary methods return Unit.
  "-Xlint:option-implicit",        // Option.apply used implicit view.
  "-Xlint:package-object-classes", // Class or object defined in package object.
  "-Xlint:poly-implicit-overload", // Parameterized overloaded implicit methods are not visible as view bounds.
  "-Xlint:private-shadow",         // A private field (or class parameter) shadows a superclass field.
  "-Xlint:stars-align",            // Pattern sequence wildcard must align with sequence component.
  "-Xlint:type-parameter-shadow",  // A local type parameter shadows a type already in scope.
  "-Ywarn-dead-code",              // Warn when dead code is identified.
  "-Ywarn-extra-implicit",         // Warn when more than one implicit parameter section is defined.
  "-Ywarn-numeric-widen",          // Warn when numerics are widened.
  "-Ywarn-unused:implicits",       // Warn if an implicit parameter is unused.
  "-Ywarn-unused:imports",         // Warn if an import selector is not referenced.
  "-Ywarn-unused:locals",          // Warn if a local definition is unused.
  "-Ywarn-unused:params",          // Warn if a value parameter is unused.
  "-Ywarn-unused:patvars",         // Warn if a variable bound in a pattern is unused.
  "-Ywarn-unused:privates",        // Warn if a private member is unused.
  "-Ywarn-value-discard",          // Warn when non-Unit expression results are unused.
  "-Xsource:3"                     // use Scala 3 syntax
)
